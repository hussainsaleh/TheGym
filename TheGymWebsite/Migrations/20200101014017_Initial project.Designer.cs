// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheGymWebsite.Models;

namespace TheGymWebsite.Migrations
{
    [DbContext(typeof(GymDbContext))]
    [Migration("20200101014017_Initial project")]
    partial class Initialproject
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "210b86ac-4cf9-4622-b036-63538527cf2e",
                            ConcurrencyStamp = "e04ea160-3b06-4cb4-b232-ab3d9cc01af5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "ManageBusiness",
                            ClaimValue = "True",
                            RoleId = "210b86ac-4cf9-4622-b036-63538527cf2e"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "ManageRoles",
                            ClaimValue = "True",
                            RoleId = "210b86ac-4cf9-4622-b036-63538527cf2e"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "ManageUsers",
                            ClaimValue = "True",
                            RoleId = "210b86ac-4cf9-4622-b036-63538527cf2e"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "IssueBans",
                            ClaimValue = "True",
                            RoleId = "210b86ac-4cf9-4622-b036-63538527cf2e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/2000",
                            UserId = "18500ac7-d4d4-48e3-ae25-73472024b0bf"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Employee",
                            ClaimValue = "01/01/2020",
                            UserId = "18500ac7-d4d4-48e3-ae25-73472024b0bf"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "MembershipExpiry",
                            ClaimValue = "31/12/9999",
                            UserId = "18500ac7-d4d4-48e3-ae25-73472024b0bf"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/2000",
                            UserId = "0626cffb-c5c4-4be2-8ea9-cb90fd168f71"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/1950",
                            UserId = "87a8cfe3-48d7-4b8c-b476-54464c0177ad"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/1960",
                            UserId = "b70dbb4b-a9ff-49d6-8bb4-508e78f658d3"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/1970",
                            UserId = "e652e007-6ce7-4234-b72e-af8bf5f09e93"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/1994",
                            UserId = "dbe94e74-5203-456f-adcd-f7545da15481"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/1993",
                            UserId = "58c91f33-4d85-4ef7-8c43-86d4123add0c"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/1984",
                            UserId = "753a18b8-e312-4761-b249-73fce0add698"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/1982",
                            UserId = "afda1649-0e87-4b7d-9ebd-2a1f01b7b1f8"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "DateOfBirth",
                            ClaimValue = "01/01/2010",
                            UserId = "e61e44bd-cadf-4509-a133-cb5d3e6c4841"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "18500ac7-d4d4-48e3-ae25-73472024b0bf",
                            RoleId = "210b86ac-4cf9-4622-b036-63538527cf2e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TheGymWebsite.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressLineOne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLineTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "18500ac7-d4d4-48e3-ae25-73472024b0bf",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 Admin Road",
                            AddressLineTwo = "Admin Area",
                            ConcurrencyStamp = "382252dc-20e6-4b26-883d-2147301d983a",
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "AdminFirstName",
                            Gender = 0,
                            LastName = "AdminLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHRzTJbDkTvC+5H3avMusIrNK/ewzf53XWCamofOt9I+94pwK/LvQ9S9loHYOOAWxw==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "d0a471d3-bd2b-4293-97a1-d5f3b0cbceb5",
                            Title = 0,
                            Town = "AdminTown",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "0626cffb-c5c4-4be2-8ea9-cb90fd168f71",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 huss Road",
                            AddressLineTwo = "huss Area",
                            ConcurrencyStamp = "05df934a-0959-4c26-a751-7939aa7a4e78",
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huss@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "hussFirstName",
                            Gender = 0,
                            LastName = "hussLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "HUSS@YAHOO.COM",
                            NormalizedUserName = "HUSS@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBztugXWM9oBsie7a8B/1ng8DiKXY/KILgE3ch1XTeeR1MH/xXzPEK5V38JkvJuv9Q==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "2f818cc9-7f1a-4613-b9b0-17519271a749",
                            Title = 0,
                            Town = "hussTown",
                            TwoFactorEnabled = false,
                            UserName = "huss@yahoo.com"
                        },
                        new
                        {
                            Id = "87a8cfe3-48d7-4b8c-b476-54464c0177ad",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 beky Road",
                            AddressLineTwo = "beky Area",
                            ConcurrencyStamp = "4b9e4e6b-91a8-4f13-96cb-272271bc122c",
                            DateOfBirth = new DateTime(1950, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "beky@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "bekyFirstName",
                            Gender = 1,
                            LastName = "bekyLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "BEKY@YAHOO.COM",
                            NormalizedUserName = "BEKY@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMZymqrfPfE12f89R7Tt0QQVCQk31n3iKOwNxGh1dB2U7Ns5aMcIaZdB4ggtREbGRw==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "6ab79e09-01a2-4f54-bfef-f593a508bb92",
                            Title = 0,
                            Town = "bekyTown",
                            TwoFactorEnabled = false,
                            UserName = "beky@yahoo.com"
                        },
                        new
                        {
                            Id = "b70dbb4b-a9ff-49d6-8bb4-508e78f658d3",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 alice Road",
                            AddressLineTwo = "alice Area",
                            ConcurrencyStamp = "4c6aef58-3071-4a66-afcb-eb321c9ae9e7",
                            DateOfBirth = new DateTime(1960, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "aliceFirstName",
                            Gender = 1,
                            LastName = "aliceLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE@YAHOO.COM",
                            NormalizedUserName = "ALICE@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAfYhstFgQTnRgRa1P7LMngapoHA0ZrDeIDFR0GLOS+jMQ8W/mCCyscyDsQMsCOLKw==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "934f2cc4-488b-44fc-b5b4-69a222bff8fe",
                            Title = 0,
                            Town = "aliceTown",
                            TwoFactorEnabled = false,
                            UserName = "alice@yahoo.com"
                        },
                        new
                        {
                            Id = "e652e007-6ce7-4234-b72e-af8bf5f09e93",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 seba Road",
                            AddressLineTwo = "seba Area",
                            ConcurrencyStamp = "d09f5303-4849-4122-b92c-bccaf4ffb67a",
                            DateOfBirth = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "seba@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "sebaFirstName",
                            Gender = 1,
                            LastName = "sebaLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEBA@YAHOO.COM",
                            NormalizedUserName = "SEBA@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBlXYJlX3426FrBUooTBrqZWeWiAZPBOO13KQAyOBHfU997tqy2nKPVe+kkkEaFdRQ==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "c4e0f17a-c8fe-4032-97b2-a8b620d3a8a6",
                            Title = 0,
                            Town = "sebaTown",
                            TwoFactorEnabled = false,
                            UserName = "seba@yahoo.com"
                        },
                        new
                        {
                            Id = "dbe94e74-5203-456f-adcd-f7545da15481",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 john Road",
                            AddressLineTwo = "john Area",
                            ConcurrencyStamp = "13bff1bb-c702-4348-8c7b-84c0567d4850",
                            DateOfBirth = new DateTime(1994, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "johnFirstName",
                            Gender = 0,
                            LastName = "johnLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN@YAHOO.COM",
                            NormalizedUserName = "JOHN@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP0hKfS3qyVzz9Qpf3Oc/yLyx9rgm/VFvh1WzFk7jP38rSF6hCZeezTSEJcg65si9A==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "b960c8f0-1989-47bf-b90a-951a5c1c95f0",
                            Title = 0,
                            Town = "johnTown",
                            TwoFactorEnabled = false,
                            UserName = "john@yahoo.com"
                        },
                        new
                        {
                            Id = "58c91f33-4d85-4ef7-8c43-86d4123add0c",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 tom Road",
                            AddressLineTwo = "tom Area",
                            ConcurrencyStamp = "68989f5e-32d6-424a-9921-5fc3fce52163",
                            DateOfBirth = new DateTime(1993, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tom@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "tomFirstName",
                            Gender = 0,
                            LastName = "tomLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "TOM@YAHOO.COM",
                            NormalizedUserName = "TOM@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENz/5xVAM1QLaenkCX4z3+6KqliIC3zXuMEFfDePmYi0cB2v/yPFtaprB2qh+gXNHg==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "6adb239a-13ec-44cf-a8c8-0a2af050b9d2",
                            Title = 0,
                            Town = "tomTown",
                            TwoFactorEnabled = false,
                            UserName = "tom@yahoo.com"
                        },
                        new
                        {
                            Id = "753a18b8-e312-4761-b249-73fce0add698",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 jack Road",
                            AddressLineTwo = "jack Area",
                            ConcurrencyStamp = "b5007b00-6e83-401c-966e-aceaa556026f",
                            DateOfBirth = new DateTime(1984, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jack@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "jackFirstName",
                            Gender = 0,
                            LastName = "jackLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "JACK@YAHOO.COM",
                            NormalizedUserName = "JACK@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEONakR7gdRJn3QJ2kGrfv36vFv8ixjs9MLldX+1gSgJZFvcOy/9yVf2kUngQk+1bSw==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "b2d0f823-e375-471e-9ad0-ea46854f547d",
                            Title = 0,
                            Town = "jackTown",
                            TwoFactorEnabled = false,
                            UserName = "jack@yahoo.com"
                        },
                        new
                        {
                            Id = "afda1649-0e87-4b7d-9ebd-2a1f01b7b1f8",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 jam Road",
                            AddressLineTwo = "jam Area",
                            ConcurrencyStamp = "ba302a8b-5a94-435f-b435-2761c36cfbcd",
                            DateOfBirth = new DateTime(1982, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jam@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "jamFirstName",
                            Gender = 0,
                            LastName = "jamLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAM@YAHOO.COM",
                            NormalizedUserName = "JAM@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDQ7fkJn8J3MVBS+IgzkZwrmEVDDjl+ywvGxnlq9yOZEIwRaYYylhta90HvCdSSWQw==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "fa1e1164-3340-4070-8664-0f66f0a1ba1d",
                            Title = 0,
                            Town = "jamTown",
                            TwoFactorEnabled = false,
                            UserName = "jam@yahoo.com"
                        },
                        new
                        {
                            Id = "e61e44bd-cadf-4509-a133-cb5d3e6c4841",
                            AccessFailedCount = 0,
                            AddressLineOne = "1 mark Road",
                            AddressLineTwo = "mark Area",
                            ConcurrencyStamp = "5b061821-b402-4b5f-8f7d-57c4ccf5a653",
                            DateOfBirth = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mark@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "markFirstName",
                            Gender = 0,
                            LastName = "markLastName",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARK@YAHOO.COM",
                            NormalizedUserName = "MARK@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHl6e/2v1rygN2/N5bqBr8ZE9JgQLhQYJuCOuoJFWCxkcJSzD4urYUU7g0WzeJdMvg==",
                            PhoneNumber = "00000000000",
                            PhoneNumberConfirmed = false,
                            Postcode = "AD1 2MN",
                            SecurityStamp = "fa287936-dfa6-4848-b7ba-06507acf146b",
                            Title = 0,
                            Town = "markTown",
                            TwoFactorEnabled = false,
                            UserName = "mark@yahoo.com"
                        });
                });

            modelBuilder.Entity("TheGymWebsite.Models.FreePass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUsed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FreePasses");
                });

            modelBuilder.Entity("TheGymWebsite.Models.Gym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLineOne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLineTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GymName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gyms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressLineOne = "33 Oak road",
                            AddressLineTwo = "Erdon",
                            Email = "thegymbirmingham@yahoo.com",
                            GymName = "The Gym",
                            Postcode = "B20 1EZ",
                            Telephone = "07739983984",
                            Town = "Birmingham"
                        });
                });

            modelBuilder.Entity("TheGymWebsite.Models.GymAttendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AttendanceRecord");
                });

            modelBuilder.Entity("TheGymWebsite.Models.MembershipDeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Duration")
                        .IsUnique();

                    b.ToTable("MembershipDeals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 1,
                            Price = 10m
                        },
                        new
                        {
                            Id = 2,
                            Duration = 3,
                            Price = 20m
                        },
                        new
                        {
                            Id = 3,
                            Duration = 7,
                            Price = 100m
                        },
                        new
                        {
                            Id = 4,
                            Duration = 8,
                            Price = 160m
                        });
                });

            modelBuilder.Entity("TheGymWebsite.Models.OpenHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayName")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("OpenHours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayName = 1,
                            OpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayName = 2,
                            OpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayName = 3,
                            OpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayName = 4,
                            OpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            CloseTime = new TimeSpan(0, 22, 0, 0, 0),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayName = 5,
                            OpenTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            CloseTime = new TimeSpan(0, 20, 0, 0, 0),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayName = 6,
                            OpenTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            CloseTime = new TimeSpan(0, 20, 0, 0, 0),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayName = 0,
                            OpenTime = new TimeSpan(0, 8, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("TheGymWebsite.Models.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobPeriod")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("JobType")
                        .HasColumnType("int");

                    b.Property<int>("PayInterval")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TheGymWebsite.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TheGymWebsite.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheGymWebsite.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TheGymWebsite.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TheGymWebsite.Models.GymAttendance", b =>
                {
                    b.HasOne("TheGymWebsite.Models.ApplicationUser", "User")
                        .WithMany("AttendanceRecord")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
